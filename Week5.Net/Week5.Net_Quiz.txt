QUIZ: SIMPLE AGGREGATION EXAMPLE

Write the aggregation query that will find the number of products by category of a collection that has the form:
{
	"_id" : ObjectId("50b1aa983b3d0043b51b2c52"),
	"name" : "Nexus 7",
	"category" : "Tablets",
	"manufacturer" : "Google",
	"price" : 199
}

Have the resulting key be called "num_products," as in the video lesson. Hint, you just need to change which key you are aggregating on relative to the examples shown in the lesson.
Please double quote all keys to make it easier to check your result.

db.products.aggregate([
 {$group:
	{
	"_id":"$category",
	"num_products":{"$sum":1}
	}
 }
])
------------------------------------------------------------------------
QUIZ: THE AGGREGATION PIPELINE
Which of the following are stages in the aggregation pipeline. Check all that apply.
Match
Transpose (All except this)
Group
Skip
Limit
Sort
Project
Unwind
------------------------------------------------------------------------
QUIZ: SIMPLE EXAMPLE EXPANDED

If you have the following collection of stuff:
> db.stuff.find()
{ "_id" : ObjectId("50b26f9d80a78af03b5163c8"), "a" : 1, "b" : 1, "c" : 1 }
{ "_id" : ObjectId("50b26fb480a78af03b5163c9"), "a" : 2, "b" : 2, "c" : 1 }
{ "_id" : ObjectId("50b26fbf80a78af03b5163ca"), "a" : 3, "b" : 3, "c" : 1 }
{ "_id" : ObjectId("50b26fcd80a78af03b5163cb"), "a" : 3, "b" : 3, "c" : 2 }
{ "_id" : ObjectId("50b26fd380a78af03b5163cc"), "a" : 3, "b" : 5, "c" : 3 }
and you perform the following aggregation:
db.stuff.aggregate([{$group:{_id:'$c'}}])
How many documents will be in the result set from aggregate?
Ans: 3
------------------------------------------------------------------------
QUIZ: COMPOUND GROUPING

Given the following collection:
> db.stuff.find()
{ "_id" : ObjectId("50b26f9d80a78af03b5163c8"), "a" : 1, "b" : 1, "c" : 1 }
{ "_id" : ObjectId("50b26fb480a78af03b5163c9"), "a" : 2, "b" : 2, "c" : 1 }
{ "_id" : ObjectId("50b26fbf80a78af03b5163ca"), "a" : 3, "b" : 3, "c" : 1 }
{ "_id" : ObjectId("50b26fcd80a78af03b5163cb"), "a" : 3, "b" : 3, "c" : 2 }
{ "_id" : ObjectId("50b26fd380a78af03b5163cc"), "a" : 3, "b" : 5, "c" : 3 }
{ "_id" : ObjectId("50b27f7080a78af03b5163cd"), "a" : 3, "b" : 3, "c" : 2 }
And the following aggregation query:
db.stuff.aggregate([{$group:
		     {_id:
		      {'moe':'$a', 
		       'larry':'$b',
		       'curly':'$c'
		      }
		     }
		    }])
How many documents will be in the result set?
Ans: 5
------------------------------------------------------------------------
Which of the following aggregation expressions must be used in conjunction with a sort to make any sense?

$addToSet
$first
$last
$max
$min
$avg
$push
$sum
Ans: $first, $last
------------------------------------------------------------------------
QUIZ: USING $SUM
Suppose we have a collection of populations by postal code. The postal codes in are in the _id field, and are therefore unique. Documents look like this:

{
	"city" : "CLANTON",
	"loc" : [
		-86.642472,
		32.835532
	],
	"pop" : 13990,
	"state" : "AL",
	"_id" : "35045"
}

Write an aggregation query to sum up the population (pop) by state and put the result in a field called population. 

Ans:
db.zips.aggregate( [ {"$group": {"_id":"$state", "population":{$sum:"$pop"}}}] )
------------------------------------------------------------------------

QUIZ: USING $AVG
Given population data by zip code (postal code), write an aggregation expression to calculate the average population of a zip code (postal code) by state
Ans:
db.zips.aggregate([{$group:{_id:{"state":"$state"},avgpop:{$avg:"$pop"}}}])
----------------------------------------------
QUIZ: USING $ADDTOSET
Write an aggregation query that will return the postal codes that cover each city. The results should look like this:
{
		
			"_id" : "CENTREVILLE",
			"postal_codes" : [
				"22020",
				"49032",
				"39631",
				"21617",
				"35042"
			]
		},
		

Ans:
db.zips.aggregate([{$group:{_id:"$city", postal_codes:{"$addToSet":"$_id"}}}])
----------------------------------------
QUIZ: USING $MAX AND $MIN

Again thinking about the zip code database, write an aggregation query that will return the population of the postal code in each state with the highest population. It should return output that looks like this:
{
			"_id" : "WI",
			"pop" : 57187
		},
		{
			"_id" : "WV",
			"pop" : 70185
		},
		
Ans:
db.zips.aggregate([{$group:{"_id":"$state", pop:{"$max":"$pop"}}}])

---------------------------------------

QUIZ: DOUBLE $GROUP STAGES

Given the following collection:
> db.fun.find()
{ "_id" : 0, "a" : 0, "b" : 0, "c" : 21 }
{ "_id" : 1, "a" : 0, "b" : 0, "c" : 54 }
{ "_id" : 2, "a" : 0, "b" : 1, "c" : 52 }
{ "_id" : 3, "a" : 0, "b" : 1, "c" : 17 }
{ "_id" : 4, "a" : 1, "b" : 0, "c" : 22 }
{ "_id" : 5, "a" : 1, "b" : 0, "c" : 5 }
{ "_id" : 6, "a" : 1, "b" : 1, "c" : 87 }
{ "_id" : 7, "a" : 1, "b" : 1, "c" : 97 }

And the following aggregation query
db.fun.aggregate([{$group:{_id:{a:"$a", b:"$b"}, c:{$max:"$c"}}}, {$group:{_id:"$_id.a", c:{$min:"$c"}}}])
What values are returned?
Ans: 52 and 22
--------------------------------------------------
Write an aggregation query with a single projection stage that will transform the documents in the zips collection from this:
{
	"city" : "ACMAR",
	"loc" : [
		-86.51557,
		33.584132
	],
	"pop" : 6055,
	"state" : "AL",
	"_id" : "35004"
}

to documents in the result set that look like this:
{
	"city" : "acmar",
	"pop" : 6055,
	"state" : "AL",
	"zip" : "35004"
}
Ans:
db.zips.aggregate([
{$project:{_id:0, city:{"$toLower":"$city"}, pop:1, state:1, zip:"$_id"}}])
------------------------------------------------------------
QUIZ: USING $MATCH

Again, thinking about the zipcode collection, write an aggregation query with a single match phase that filters for zipcodes with greater than 100,000 people. You may need to look up the use of the $gt operator in the MongoDB docs. 
Ans:
db.zips.aggregate([
{
$match:{pop:{$gt:100000}}
}
])
--------------------------------------------------------------------------
QUIZ: USING $SORT

Again, considering the zipcode collection, which has documents that look like this,
{
	"city" : "ACMAR",
	"loc" : [
		-86.51557,
		33.584132
	],
	"pop" : 6055,
	"state" : "AL",
	"_id" : "35004"
}

Write an aggregation query with just a sort stage to sort by (state, city), both ascending. Assume the collection is called zips.
Ans:
db.zips.aggregate([{$sort:{state:1, city:1}}])
--------------------------------------------------------------------------
QUIZ: USING $LIMIT AND $SKIP

Suppose you change the order of skip and limit in the query shown in the lesson, to look like this:
db.zips.aggregate([
    {$match:
     {
	 state:"NY"
     }
    },
    {$group:
     {
	 _id: "$city",
	 population: {$sum:"$pop"},
     }
    },
    {$project:
     {
	 _id: 0,
	 city: "$_id",
	 population: 1,
     }
    },
    {$sort:
     {
	 population:-1
     }
    },
    {$limit: 5},
    {$skip: 10} 
])

Ans: 0
--------------------------------------------------------------------------
QUIZ: REVISITING $FIRST AND $LAST

Given the following collection:
> db.fun.find()
{ "_id" : 0, "a" : 0, "b" : 0, "c" : 21 }
{ "_id" : 1, "a" : 0, "b" : 0, "c" : 54 }
{ "_id" : 2, "a" : 0, "b" : 1, "c" : 52 }
{ "_id" : 3, "a" : 0, "b" : 1, "c" : 17 }
{ "_id" : 4, "a" : 1, "b" : 0, "c" : 22 }
{ "_id" : 5, "a" : 1, "b" : 0, "c" : 5 }
{ "_id" : 6, "a" : 1, "b" : 1, "c" : 87 }
{ "_id" : 7, "a" : 1, "b" : 1, "c" : 97 }
What would be the value of c in the result from this aggregation query
db.fun.aggregate([
    {$match:{a:0}},
    {$sort:{c:-1}}, 
    {$group:{_id:"$a", c:{$first:"$c"}}}
])
Ans: 54
-------------------------------------------------------------------------
QUIZ: USING $UNWIND

Suppose you have the following collection:
db.people.find()
{ "_id" : "Barack Obama", "likes" : [ "social justice", "health care", "taxes" ] }
{ "_id" : "Mitt Romney", "likes" : [ "a balanced budget", "corporations", "binders full of women" ] }
And you unwind the "likes" array of each document. How many documents will you wind up with?
Ans :6
--------------------------------------------------------------------
QUIZ: $UNWIND EXAMPLE

Which grouping operator will enable to you to reverse the effects of an unwind?
Ans:$push
-----------------------------------------------------------------------
QUIZ: DOUBLE $UNWIND

Can you reverse the effects of a double unwind (2 unwinds in a row) in our inventory collection (shown in the lesson ) with the $push operator?
Ans:Yes
-------------------------------------------------------------------------
--------------------------------------------------------------------------
Reference Qry of Aggregate with its features:
use agg
db.zips.aggregate([
    {$match:
     {
	 state:"NY"
     }
    },
    {$group:
     {
	 _id: "$city",
	 population: {$sum:"$pop"},
     }
    },
    {$project:
     {
	 _id: 0,
	 city: "$_id",
	 population: 1,
     }
    },
    {$sort:
     {
	 population:-1
     }
    },
    {$skip: 10},
    {$limit: 5}
])
