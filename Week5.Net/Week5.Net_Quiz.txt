QUIZ: SIMPLE AGGREGATION EXAMPLE

Write the aggregation query that will find the number of products by category of a collection that has the form:
{
	"_id" : ObjectId("50b1aa983b3d0043b51b2c52"),
	"name" : "Nexus 7",
	"category" : "Tablets",
	"manufacturer" : "Google",
	"price" : 199
}

Have the resulting key be called "num_products," as in the video lesson. Hint, you just need to change which key you are aggregating on relative to the examples shown in the lesson.
Please double quote all keys to make it easier to check your result.

db.products.aggregate([
 {$group:
	{
	"_id":"$category",
	"num_products":{"$sum":1}
	}
 }
])
------------------------------------------------------------------------
QUIZ: THE AGGREGATION PIPELINE
Which of the following are stages in the aggregation pipeline. Check all that apply.
Match
Transpose (All except this)
Group
Skip
Limit
Sort
Project
Unwind
------------------------------------------------------------------------
QUIZ: SIMPLE EXAMPLE EXPANDED

If you have the following collection of stuff:
> db.stuff.find()
{ "_id" : ObjectId("50b26f9d80a78af03b5163c8"), "a" : 1, "b" : 1, "c" : 1 }
{ "_id" : ObjectId("50b26fb480a78af03b5163c9"), "a" : 2, "b" : 2, "c" : 1 }
{ "_id" : ObjectId("50b26fbf80a78af03b5163ca"), "a" : 3, "b" : 3, "c" : 1 }
{ "_id" : ObjectId("50b26fcd80a78af03b5163cb"), "a" : 3, "b" : 3, "c" : 2 }
{ "_id" : ObjectId("50b26fd380a78af03b5163cc"), "a" : 3, "b" : 5, "c" : 3 }
and you perform the following aggregation:
db.stuff.aggregate([{$group:{_id:'$c'}}])
How many documents will be in the result set from aggregate?
Ans: 3
------------------------------------------------------------------------
QUIZ: COMPOUND GROUPING

Given the following collection:
> db.stuff.find()
{ "_id" : ObjectId("50b26f9d80a78af03b5163c8"), "a" : 1, "b" : 1, "c" : 1 }
{ "_id" : ObjectId("50b26fb480a78af03b5163c9"), "a" : 2, "b" : 2, "c" : 1 }
{ "_id" : ObjectId("50b26fbf80a78af03b5163ca"), "a" : 3, "b" : 3, "c" : 1 }
{ "_id" : ObjectId("50b26fcd80a78af03b5163cb"), "a" : 3, "b" : 3, "c" : 2 }
{ "_id" : ObjectId("50b26fd380a78af03b5163cc"), "a" : 3, "b" : 5, "c" : 3 }
{ "_id" : ObjectId("50b27f7080a78af03b5163cd"), "a" : 3, "b" : 3, "c" : 2 }
And the following aggregation query:
db.stuff.aggregate([{$group:
		     {_id:
		      {'moe':'$a', 
		       'larry':'$b',
		       'curly':'$c'
		      }
		     }
		    }])
How many documents will be in the result set?
Ans: 5
------------------------------------------------------------------------
Which of the following aggregation expressions must be used in conjunction with a sort to make any sense?

$addToSet
$first
$last
$max
$min
$avg
$push
$sum
Ans: $first, $last
------------------------------------------------------------------------
QUIZ: USING $SUM
Suppose we have a collection of populations by postal code. The postal codes in are in the _id field, and are therefore unique. Documents look like this:

{
	"city" : "CLANTON",
	"loc" : [
		-86.642472,
		32.835532
	],
	"pop" : 13990,
	"state" : "AL",
	"_id" : "35045"
}
<<<<<<< HEAD
Write an aggregation query to sum up the population (pop) by state and put the result in a field called population. 

Ans:
db.zips.aggregate( [ {"$group": {"_id":"$state", "population":{$sum:"$pop"}}}] )
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
=======
]
)
--------------------
update pending from off dsk

--------------------------------------------------
QUIZ: USING $AVG
Given population data by zip code (postal code), write an aggregation expression to calculate the average population of a zip code (postal code) by state
Ans:
db.zips.aggregate([{$group:{_id:{"state":"$state"},avgpop:{$avg:"$pop"}}}])
----------------------------------------------
QUIZ: USING $ADDTOSET
Write an aggregation query that will return the postal codes that cover each city. The results should look like this:
{
		
			"_id" : "CENTREVILLE",
			"postal_codes" : [
				"22020",
				"49032",
				"39631",
				"21617",
				"35042"
			]
		},
		

Ans:
db.zips.aggregate([{$group:{_id:"$city", postal_codes:{"$addToSet":"$_id"}}}])
----------------------------------------
QUIZ: USING $MAX AND $MIN

Again thinking about the zip code database, write an aggregation query that will return the population of the postal code in each state with the highest population. It should return output that looks like this:
{
			"_id" : "WI",
			"pop" : 57187
		},
		{
			"_id" : "WV",
			"pop" : 70185
		},
		
Ans:
db.zips.aggregate([{$group:{"_id":"$state", pop:{"$max":"$pop"}}}])

---------------------------------------

QUIZ: DOUBLE $GROUP STAGES

Given the following collection:
> db.fun.find()
{ "_id" : 0, "a" : 0, "b" : 0, "c" : 21 }
{ "_id" : 1, "a" : 0, "b" : 0, "c" : 54 }
{ "_id" : 2, "a" : 0, "b" : 1, "c" : 52 }
{ "_id" : 3, "a" : 0, "b" : 1, "c" : 17 }
{ "_id" : 4, "a" : 1, "b" : 0, "c" : 22 }
{ "_id" : 5, "a" : 1, "b" : 0, "c" : 5 }
{ "_id" : 6, "a" : 1, "b" : 1, "c" : 87 }
{ "_id" : 7, "a" : 1, "b" : 1, "c" : 97 }

And the following aggregation query
db.fun.aggregate([{$group:{_id:{a:"$a", b:"$b"}, c:{$max:"$c"}}}, {$group:{_id:"$_id.a", c:{$min:"$c"}}}])
What values are returned?
Ans: 52 and 22
--------------------------------------------------
>>>>>>> origin/master
